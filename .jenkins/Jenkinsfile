// Load Jenkins shared library
jenkinsBranch = 'sift-dotnet'
sharedLib = library("shared-lib@${jenkinsBranch}")

def siftDotNetWorkflow = sharedLib.com.sift.ci.SiftDotNetWorkflow.new()
def ciUtil = sharedLib.com.sift.ci.CIUtil.new()
def stackdriver = sharedLib.com.sift.ci.StackDriverMetrics.new()

// Default GitHub status context for automatically triggered builds
def defaultStatusContext = 'Jenkins:auto'

// Pod template file for Jenkins agent pod
// Pod template yaml file is defined in https://github.com/SiftScience/jenkins/tree/master/resources/jenkins-k8s-pod-templates
def podTemplateFile = 'dot-net-7-pod-template.yaml'
def podLabel = "dot-net-${BUILD_TAG}"



// GitHub repo name
def repoName = 'sift-dotnet'

pipeline {
    agent none
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
        disableRestartFromStage()
        parallelsAlwaysFailFast()
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '30', numToKeepStr: '')
        timeout(time: 20, unit: 'MINUTES')
    }
    environment {
        GIT_BRANCH = "${env.CHANGE_BRANCH != null? env.CHANGE_BRANCH : env.BRANCH_NAME}"
        DOTNET_CLI_TELEMETRY_OPTOUT = '1'
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    statusContext = defaultStatusContext
                    // Get the commit sha for the build
                    commitSha = ciUtil.commitHashForBuild()
                    ciUtil.updateGithubCommitStatus(repoName, statusContext, 'Started', 'pending', commitSha)
                }
            }
        }
        stage ('Build and Test Workflows') {
            steps {
                script {
                    def workflows = [:]
                    def stage1 = 'Run Integration Tests -net7'
                    workflows[stage1] = {
                        stage(stage1) {
                            // if (env.GIT_BRANCH.equals('master')) {
                                ciUtil.updateGithubCommitStatus(repoName, stage1, 'Started', 'pending', commitSha)
                                try {
                                    siftDotNetWorkflow.runSiftDotNetIntegration(podTemplateFile, podLabel)
                                    ciUtil.updateGithubCommitStatus(repoName, stage1, 'SUCCESS', 'success', commitSha)
                                } catch (Exception e) {
                                    ciUtil.updateGithubCommitStatus(repoName, stage1, 'FAILURE', 'failure', commitSha)
                                    print("${stage1} failed")
                                    throw e
                                }
                            // }
                        }
                    }
                    def stage2 = 'Build'
                    workflows[stage2] = {
                        stage(stage2) {
                            ciUtil.updateGithubCommitStatus(repoName, stage2, 'Started', 'pending', commitSha)
                            try {
                                siftDotNetWorkflow.runSiftDotNetBuild(podTemplateFile, podLabel)
                                ciUtil.updateGithubCommitStatus(repoName, stage2, 'SUCCESS', 'success', commitSha)
                            } catch (Exception e) {
                                ciUtil.updateGithubCommitStatus(repoName, stage2, 'FAILURE', 'failure', commitSha)
                                print("${stage2} failed")
                                throw e
                            }
                        }
                    }
                    parallel workflows
                }
            }
        }
    }
    post {
        success {
            script {
                ciUtil.updateGithubCommitStatus(repoName, statusContext, currentBuild.currentResult, 'success', commitSha)
            }
        }
        unsuccessful {
            script {
                ciUtil.updateGithubCommitStatus(repoName, statusContext, currentBuild.currentResult, 'failure', commitSha)
                ciUtil.notifySlack(repoName, commitSha)
            }
        }
        always {
            script {
                stackdriver.updatePipelineStatistics(this)
            }
        }
    }
}
